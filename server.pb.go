// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.7
// source: server.proto

package jobsvr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_server_proto protoreflect.FileDescriptor

var file_server_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6a, 0x6f, 0x62, 0x73, 0x76, 0x72, 0x1a, 0x09, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0xb9, 0x01, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x12, 0x2e, 0x6a, 0x6f,
	0x62, 0x73, 0x76, 0x72, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x76, 0x72, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x4a, 0x6f,
	0x62, 0x73, 0x12, 0x13, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x76, 0x72, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x76, 0x72,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x16,
	0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x76, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x76, 0x72, 0x2e,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x30, 0x01, 0x42, 0x0a, 0x5a,
	0x08, 0x2e, 0x3b, 0x6a, 0x6f, 0x62, 0x73, 0x76, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var file_server_proto_goTypes = []interface{}{
	(*PostJobReq)(nil),     // 0: jobsvr.PostJobReq
	(*PostJobsReq)(nil),    // 1: jobsvr.PostJobsReq
	(*ListenQueueReq)(nil), // 2: jobsvr.ListenQueueReq
	(*PostJobResp)(nil),    // 3: jobsvr.PostJobResp
	(*PostJobsResp)(nil),   // 4: jobsvr.PostJobsResp
	(*JobStream)(nil),      // 5: jobsvr.JobStream
}
var file_server_proto_depIdxs = []int32{
	0, // 0: jobsvr.JobManager.PostJob:input_type -> jobsvr.PostJobReq
	1, // 1: jobsvr.JobManager.PostJobs:input_type -> jobsvr.PostJobsReq
	2, // 2: jobsvr.JobManager.ListenQueue:input_type -> jobsvr.ListenQueueReq
	3, // 3: jobsvr.JobManager.PostJob:output_type -> jobsvr.PostJobResp
	4, // 4: jobsvr.JobManager.PostJobs:output_type -> jobsvr.PostJobsResp
	5, // 5: jobsvr.JobManager.ListenQueue:output_type -> jobsvr.JobStream
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	file_job_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
	}.Build()
	File_server_proto = out.File
	file_server_proto_rawDesc = nil
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JobManagerClient is the client API for JobManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobManagerClient interface {
	PostJob(ctx context.Context, in *PostJobReq, opts ...grpc.CallOption) (*PostJobResp, error)
	PostJobs(ctx context.Context, in *PostJobsReq, opts ...grpc.CallOption) (*PostJobsResp, error)
	ListenQueue(ctx context.Context, in *ListenQueueReq, opts ...grpc.CallOption) (JobManager_ListenQueueClient, error)
}

type jobManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobManagerClient(cc grpc.ClientConnInterface) JobManagerClient {
	return &jobManagerClient{cc}
}

func (c *jobManagerClient) PostJob(ctx context.Context, in *PostJobReq, opts ...grpc.CallOption) (*PostJobResp, error) {
	out := new(PostJobResp)
	err := c.cc.Invoke(ctx, "/jobsvr.JobManager/PostJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) PostJobs(ctx context.Context, in *PostJobsReq, opts ...grpc.CallOption) (*PostJobsResp, error) {
	out := new(PostJobsResp)
	err := c.cc.Invoke(ctx, "/jobsvr.JobManager/PostJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) ListenQueue(ctx context.Context, in *ListenQueueReq, opts ...grpc.CallOption) (JobManager_ListenQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JobManager_serviceDesc.Streams[0], "/jobsvr.JobManager/ListenQueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobManagerListenQueueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobManager_ListenQueueClient interface {
	Recv() (*JobStream, error)
	grpc.ClientStream
}

type jobManagerListenQueueClient struct {
	grpc.ClientStream
}

func (x *jobManagerListenQueueClient) Recv() (*JobStream, error) {
	m := new(JobStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobManagerServer is the server API for JobManager service.
type JobManagerServer interface {
	PostJob(context.Context, *PostJobReq) (*PostJobResp, error)
	PostJobs(context.Context, *PostJobsReq) (*PostJobsResp, error)
	ListenQueue(*ListenQueueReq, JobManager_ListenQueueServer) error
}

// UnimplementedJobManagerServer can be embedded to have forward compatible implementations.
type UnimplementedJobManagerServer struct {
}

func (*UnimplementedJobManagerServer) PostJob(context.Context, *PostJobReq) (*PostJobResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostJob not implemented")
}
func (*UnimplementedJobManagerServer) PostJobs(context.Context, *PostJobsReq) (*PostJobsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostJobs not implemented")
}
func (*UnimplementedJobManagerServer) ListenQueue(*ListenQueueReq, JobManager_ListenQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenQueue not implemented")
}

func RegisterJobManagerServer(s *grpc.Server, srv JobManagerServer) {
	s.RegisterService(&_JobManager_serviceDesc, srv)
}

func _JobManager_PostJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).PostJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobsvr.JobManager/PostJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).PostJob(ctx, req.(*PostJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_PostJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostJobsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).PostJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobsvr.JobManager/PostJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).PostJobs(ctx, req.(*PostJobsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_ListenQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenQueueReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobManagerServer).ListenQueue(m, &jobManagerListenQueueServer{stream})
}

type JobManager_ListenQueueServer interface {
	Send(*JobStream) error
	grpc.ServerStream
}

type jobManagerListenQueueServer struct {
	grpc.ServerStream
}

func (x *jobManagerListenQueueServer) Send(m *JobStream) error {
	return x.ServerStream.SendMsg(m)
}

var _JobManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jobsvr.JobManager",
	HandlerType: (*JobManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostJob",
			Handler:    _JobManager_PostJob_Handler,
		},
		{
			MethodName: "PostJobs",
			Handler:    _JobManager_PostJobs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenQueue",
			Handler:       _JobManager_ListenQueue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
